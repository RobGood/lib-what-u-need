{
   "README" : "This app renders the site's top level page\n\nIt also renders pages for any utility found under\n/utilities which has a 'main' function.",
   "_dateCreated" : "Mon Apr  8 16:24:40 2013",
   "_useCount" : 373,
   "api-entry-points" : "// The names on the left represent request patterns that will be accepted.\n// The names on the right refer to the corresponding request handler named in /api-handler.\n\n{\n  GET/                      show-top-page\n  GET/utilities/~util-path* run-utility\n}",
   "api-handlers" : {
      "run-utility" : "(= path (join / ['' utilities @$req-util-path]))\n(def-hash-fn $self $path main)\n(if (fn? $main) (return (main)))\n\n(reply-html (html-app-template\n  (html-page-error \"Nothing found for $path\")))",
      "show-top-page" : "(reply-html (html-app-template (html-page-top)))"
   },
   "html" : {
      "README" : "HTML rendering code",
      "html-controls" : "(def-fn edit-view-control-label (tail)\n  (=? tail '')\n  (concat (if (defined? $userid) edit view) \"$tail top page source\"))\n\n(def-fn html-controls-one (url label)\n  (if (defined? $url)\n    (html-a {href $url} $label)\n    $label))\n\n(fn () [\n  (html-controls-one (self-url e) (edit-view-control-label))\n])",
      "html-one-utility" : "(fn (path -- rm-text title label)\n  (report ' >> (%s %s)' $. $path)\n\n  (= path    \"/utilities$path\")\n  (= rm-text (split '\\n' (hash-get $self $path README)))\n  (= title   (shift $rm-text))\n  (= label   (if (defined? $userid) Edit View))\n\n  [\n    <tr><td>\n      '<table width=\"100%\">'\n      <tr>\n      '<td align=\"left\">' (html-b $title) </td>\n      '<td align=\"right\" width=\"20%\">'\n          (bracket-link (html-a {href (self-url e $path)} \"<b>${label}</b>\"))\n          (bracket-link (html-a {href (self-url x $path)} '<b>Run</b>'))\n      </td>\n      </tr>\n      </table>\n    $rm-text\n    </td></tr>\n  ])",
      "html-utility-heading" : "(def-fn html-utility-heading--no-link (text text2)\n  (html-utility-heading $text $text2 (true)))\n\n(fn (text text2 supress-link? -- text3 url log-in-out edit-url)\n  (if (list? $text2) (do\n    (= texts $text2)\n    (= text2 (shift $texts))\n    (= text3 (shift $texts))\n  ))\n\n  (= url (if (! $supress-link?) (self-url x $path)))\n  (= log-in-out (if (defined? $userid) logout login))\n  (= edit-url /api/dple/top-page?_workspaceName=/lib-what-u-need)\n\n[\n  '<table width=\"100%\">' <tr>\n  <td>\n    (html-h 2 (html-controls-one $url $text))\n    (html-p $text2)\n  </td>\n  '<td valign=\"top\" align=\"right\">'\n    (if (defined? $userid) \" $userid ($workspace-name)\")\n    (bracket-link (html-a {href \"/api/dplx/user/$log-in-out\"}  $log-in-out))\n    (bracket-link (html-a {href  /api/dplx/top-page}           'back to top page'))\n    (bracket-link (html-a {href  $edit-url}                    (edit-view-control-label)))\n    (if (defined? $text3) [ <br/> $text3 ])\n   </td>\n  </tr></table>\n])",
      "pages" : {
         "README" : "top level rendering functions, one per page",
         "html-page-error" : "(fn (text)\n[\n  (html-utility-heading $text)\n])",
         "html-page-top" : "(fn ()\n (= heading \"<i>${app-title}</i> : webapp utilities you need ...\")\n (= tag-line\n   (html-p 'a decentralized social computing environment; '\n     (html-ul\n        'it\\'s like a wiki, but for writing webapps rather than writing documents,' <br/>\n        'it\\'s like a spreadsheet, but hierarchical rather than tabular.' <br/>\n        ...\n      ))\n  )\n\n[\n  (html-utility-heading--no-link $heading \"<b>${tag-line}</b>\")\n\n  <table>\n  (map-list html-one-utility (get-utilities-to-show))\n  </table>\n])"
      }
   },
   "main" : "(fn ())",
   "misc" : {
      "get-utilities-to-show" : "(def-fn path-has-a-main? (path)\n  (defined? (hash-get $utils $path main)))\n\n(fn ( -- utils)\n  (= utils (hash-get $self / utilities))\n  (sort-alpha\n    (grep path-has-a-main?\n      (hash-paths $utils))))",
      "self-url" : "(fn (action path workspace)\n  (=? path '')\n  (=? workspace /lib-what-u-need)\n\n  (= workspace\n    (if (defined? $workspace)\n      \"?_workspaceName=$workspace\" ''))\n\n  (sprintf /api/dpl%s/%s%s%s\n    $action\n    $self/name\n    $path\n    $workspace\n  ))"
   },
   "on-load" : "(fn ()\n  (= app-title 'What U Need')\n\n  (desc-read _ HTML-macros)\n\n  // Define the functions whose code is located as specified.\n  (def-hash-fn $self {\n    /html/pages [\n      html-page-error\n      html-page-top\n    ]\n\n    /html [\n      html-utility-heading\n      html-one-utility\n      html-controls\n    ]\n\n    /misc [\n      self-url\n      get-utilities-to-show\n    ]\n  })\n)",
   "rcs-id" : "$Id: top-page,v 1.376 2013/04/17 19:48:20 apache Exp apache $",
   "request-from-client" : {
      "schema" : {
         "HTTP" : {
            "GET" : {
               ".on-match." : "(hash-eval $self /api-handlers show-top-page)",
               "utilities" : {
                  "~util-path*" : {
                     ".on-match." : "(hash-eval $self /api-handlers run-utility)"
                  }
               }
            }
         }
      }
   },
   "utilities" : {
      "050-write-to-all" : {
         "README" : "Public posting board -- Write to All",
         "controls.html" : "<a href=\"/api/dple/wall?_workspaceName=/lib-what-u-need\">edit app source</a>",
         "main" : "(fn () (redirect-to \"http://${host}/api/dplx/wall\"))"
      },
      "100-rand-word-pair" : {
         "README" : "A brainstorming utility that present sets of random word pairs\n\nLater iterations will build on this.",
         "main" : "(= title 'random word pair brainstorming I')\n(= blurb 'have a look at these pairs and see if any jump out at you.')\n\n(fn () (reply-html\n  (html-app-template\n    (html-body {}\n      (html-utility-heading $title $blurb)\n      <table>\n      (foreach i (.. 1 8) [\n        <tr>\n        (foreach j (.. 1 8) [\n          <td>\n          (sprintf '%s %s' (rand-word) (rand-word))\n          </td>\n        ])\n        </tr>\n      ])\n      </table>\n    )\n  )\n))"
      },
      "101-rand-word-pair--pick-fav" : {
         "README" : "A brainstorming utility that present sets of random word pairs, and lets you pick favourites\n\nThis will make the pairs into links which when clicked will add\nthat pair to the others on the page.",
         "check-for-favorite-pairs" : "(fn ( -- fav-pair)\n  (dbm-atomic rand-word-pair-fav-pair {mode rw}\n    (=  fav-pairs (desc-from-string (hash-get $dbm / fav-pairs     )))\n    (=? fav-pairs (desc-from-string (hash-set $dbm / fav-pairs '[]')))\n    (if (defined? (= fav-pair (hash-get $query-hash / fav-pair))) (do\n      (unshift $fav-pairs $fav-pair)\n      (hash-set $dbm / fav-pairs (desc-to-string $fav-pairs))))))",
         "html-fav-pairs" : "(fn ( -- columns n-columns n-items n-items-per-column) \n  (= n-columns 7)\n  (= n-items (list-len $fav-pairs))\n  (= n-items-per-column (+ \n                          (int (/ $n-items $n-columns))\n                          (if (% $n-items $n-columns) 1 0)))\n\n  (= columns\n    (foreach c (.. 1 $n-columns)\n      (foreach r (.. 1 $n-items-per-column)\n         (shift $fav-pairs))))\n\n[\n  (html-h 3 'favorite pairs')\n  <table>\n  (foreach r (.. 0 (- $n-items-per-column 1)) [\n    <tr>\n    (foreach c (.. 0 (- $n-columns 1)) [\n      <td>\n        (ith (ith $columns $c) $r)\n      </td>\n    ])\n    </tr>\n  ])\n  </table>\n])",
         "html-rand-word-pair" : "(def-fn rand-word-pair ()\n  (sprintf '%s %s' (rand-word) (rand-word)))\n\n(fn ( -- url pair)\n  (= pair (rand-word-pair))\n  (= url (sprintf '%s&fav-pair=%s'\n           (self-url x $path)\n           (urlencode (utf8-encode $pair))))\n  (html-a {href $url} $pair))",
         "html-table-rand-word-pairs" : "(fn (max-i max-j)\n  (=? max-i 8)\n  (=? max-j 8)\n\n[\n  (html-h 3 'random pairs')\n  <table>\n  (foreach i (.. 1 $max-i) [\n    <tr>\n    (foreach j (.. 1 $max-j) [\n      <td>\n      (html-rand-word-pair)\n      </td>\n    ])\n    </tr>\n  ])\n  </table>\n])",
         "main" : "(= title 'random word pair brainstorming II')\n(= blurb '\nHave a look at these pairs and see if any jump out at you.\nClick on one to add it to the favorites.\n')\n\n(def-hash-fn $self {\n  . [\n    check-for-favorite-pairs\n    html-rand-word-pair\n    html-fav-pairs\n    html-table-rand-word-pairs\n  ]\n})\n\n\n(fn ( -- fav-pairs)\n (check-for-favorite-pairs)\n\n (reply-html\n  (html-app-template\n    (html-body {}\n      (html-utility-heading $title $blurb)\n      (html-table-rand-word-pairs)\n      (html-fav-pairs)))))"
      },
      "110-word-generator" : {
         "README" : "A pattern based word generator",
         "html-generated-words" : "(fn ( -- words)\n  (= words\n    (sort-alpha\n      (map-list make-one-word\n        (.. 1 $n-words))))\n  \n[\n  <table>\n  (foreach i (.. 0 15) [\n    <tr>\n    (foreach j (.. 0 15) [\n      <td> (ith $words (+ (* $j 16) $i)) </td>\n    ])\n    </tr>\n  ])\n  </table>\n])",
         "main" : "(= title 'random name/word generator')\n(= blurb '\nPick out some made up names/words you like.\nThe pattern is consonant-vowel-consonant-consonant-vowel-consonant.\n')\n\n(= consonants (split '' bcdfghjklmnpqrstvwxyz))\n(= vowels     (split '' aeiou))\n(= n-words    (* 16 16))\n\n(def-hash-fn $self {\n  . [\n    html-generated-words\n    make-one-word\n    rand-consonant\n    rand-vowel\n  ]\n})\n\n(fn () (reply-html\n  (html-app-template\n    (html-body {}\n      (html-utility-heading $title)\n      (html-p $blurb)\n      (html-generated-words)))))",
         "make-one-word" : "(fn () (concat\n  (rand-consonant)\n  (rand-vowel)\n  (rand-consonant)\n  (rand-consonant)\n  (rand-vowel)\n  (rand-consonant)\n))",
         "rand-consonant" : "(fn () (ith $consonants (int (rand 21))))",
         "rand-vowel" : "(fn () (ith $vowels (int (rand  5))))",
         "stats" : {
            "en-letter-stats" : "# English letter frequencies from\n#  http://www.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html\n{\n  consonants {\n    T [ 16587 9.100000 ]\n    N [ 12666 6.950000 ]\n    S [ 11450 6.280000 ]\n    R [ 10977 6.020000 ]\n    H [ 10795 5.920000 ]\n    D [ 7874 4.320000 ]\n    L [ 7253 3.980000 ]\n    C [ 4943 2.710000 ]\n    M [ 4761 2.610000 ]\n    F [ 4200 2.300000 ]\n    Y [ 3853 2.110000 ]\n    W [ 3819 2.090000 ]\n    G [ 3693 2.030000 ]\n    P [ 3316 1.820000 ]\n    B [ 2715 1.490000 ]\n    V [ 2019 1.110000 ]\n    K [ 1257 0.690000 ]\n    X [ 315 0.170000 ]\n    Q [ 205 0.110000 ]\n    J [ 188 0.100000 ]\n    Z [ 128 0.070000 ]\n  }\n  vowels {\n    E [ 21912 12.020000 ]\n    A [ 14810 8.120000 ]\n    O [ 14003 7.680000 ]\n    I [ 13318 7.310000 ]\n    U [ 5246 2.880000 ]\n  }\n}"
         }
      },
      "120-random-guids" : {
         "README" : "Want some random guids?",
         "main" : "// one line:\n// (fn () (reply-text (join '\\n' (map-list rand-guid (.. 1 30)))))\n\n// stacked up:\n(fn ()\n  (reply-text\n    (join '\\n'\n      (map-list rand-guid\n        (.. 1 30)))))"
      },
      "130-chat" : {
         "README" : "User chat",
         "main" : "(fn () (reply-text 'not implemented yet.'))"
      },
      "131-discussion-thread" : {
         "README" : "Discussion threads",
         "main" : "(fn () (reply-text 'not implemented yet.'))"
      },
      "200-primal" : {
         "README" : "Using Primal's data service",
         "controls.html" : "<a href=\"/api/dple/primal-getting-started?_workspaceName=/lib-primal\">edit app source</a>",
         "main" : "(fn () (redirect-to \"http://${host}/api/dplx/primal-getting-started?_workspaceName=%2F\"))"
      },
      "999-about" : {
         "README" : "About this site\n\nLicence\n\nPrivacy\n\nContact",
         "main" : "(fn ()\n  (reply-html\n    (html-app-template\n      (html-p 'This site is built with DPL to demonstrate some of its capabilities')\n      (html-ul\n        (html-li (html-a {href /api/dplx/dpl-getting-started}  'Getting started with DPL'))\n        (html-li 'Source on github: '\n                   (html-a {href https://github.com/RobGood/DPL}             DPL) ','\n                   (html-a {href https://github.com/RobGood/lib-dpl}         lib-dpl) ',' \n                   (html-a {href https://github.com/RobGood/lib-what-u-need} lib-what-u-need)\n        )\n        (html-li (html-a {href /api/dplx/get-DPL-dist}         'Download DPL'))\n      )\n      (html-p Licence)\n      (html-p Privacy)\n      (html-p Contact)\n    )))"
      }
   }
}
